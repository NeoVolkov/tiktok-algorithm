import crypto from "crypto";

const _0x4a8c =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const _0x9f2d =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const _0x7b3e = (() => {
  const _0xa = new Map();
  for (let _0xb = 0; _0xb < _0x4a8c.length; _0xb++) {
    _0xa.set(_0x4a8c[_0xb], _0x9f2d[_0xb]);
  }
  return _0xa;
})();

function _0x2f4a(_0xc) {
  const _0xd = _0xc.toString("base64");
  let _0xe = "";
  for (const _0xf of _0xd) _0xe += _0x7b3e.get(_0xf) ?? _0xf;
  return _0xe;
}

const _0x8d1c = (_0x10) => crypto.createHash("md5").update(_0x10).digest();
function _0x5c7f(_0x11, _0x12) {
  const _0x13 = new Uint8Array(256);
  for (let _0x14 = 0; _0x14 < 256; _0x14++) _0x13[_0x14] = _0x14;

  let _0x15 = 0;
  const _0x16 = _0x11.length;
  for (let _0x14 = 0; _0x14 < 256; _0x14++) {
    _0x15 = (_0x15 + _0x13[_0x14] + _0x11[_0x14 % _0x16]) & 0xff;
    [_0x13[_0x14], _0x13[_0x15]] = [_0x13[_0x15], _0x13[_0x14]];
  }

  const _0x17 = Buffer.allocUnsafe(_0x12.length);
  let _0x14 = 0;
  _0x15 = 0;
  for (let _0x18 = 0; _0x18 < _0x12.length; _0x18++) {
    _0x14 = (_0x14 + 1) & 0xff;
    _0x15 = (_0x15 + _0x13[_0x14]) & 0xff;
    [_0x13[_0x14], _0x13[_0x15]] = [_0x13[_0x15], _0x13[_0x14]];
    const _0x19 = _0x13[(_0x13[_0x14] + _0x13[_0x15]) & 0xff];
    _0x17[_0x18] = _0x12[_0x18] ^ _0x19;
  }
  return _0x17;
}

const _0x3e9a = (_0x1a) => _0x1a.reduce((_0x1b, _0x1c) => _0x1b ^ _0x1c, 0);
function _0x6d2b(_0x1d, _0x1e, _0x1f, _0x20) {
  const _0x22 = Buffer.from([0xaa]);
  const _0x23 = 0x12345678;

  const _0x24 = _0x8d1c(Buffer.from(_0x1d, "utf8"));
  const _0x25 = _0x8d1c(Buffer.from(_0x1e, "utf8"));
  const _0x26 = _0x5c7f(_0x21, Buffer.from(_0x1f, "utf8"));
  const _0x27 = Buffer.from(_0x26).toString("base64");
  const _0x28 = _0x8d1c(Buffer.from(_0x27, "ascii"));

  const _0x29 = [
    Buffer.from([0x40]),
    _0x24.subarray(12, 14),
    _0x25.subarray(12, 14),
    _0x28.subarray(12, 14),
    (() => {
      const _0x2a = Buffer.allocUnsafe(4);
      _0x2a.writeUInt32BE(_0x20 >>> 0);
      return _0x2a;
    })(),
    (() => {
      const _0x2b = Buffer.allocUnsafe(4);
      _0x2b.writeUInt32BE(_0x23);
      return _0x2b;
    })(),
  ];

  let _0x2c = Buffer.concat(_0x29);
  const _0x2d = _0x3e9a(_0x2c);
  _0x2c = Buffer.concat([_0x2c, Buffer.from([_0x2d])]);
  const _0x2e = Buffer.concat([
    Buffer.from([0x02]),
    _0x22,
    _0x5c7f(_0x22, _0x2c),
  ]);

  return _0x2f4a(_0x2e);
}

export { _0x6d2b as generateSignature, _0x6d2b as gen_bogus };
export default _0x6d2b;
